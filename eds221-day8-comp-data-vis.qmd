---
title: "eds221-day8-interactive-sessiona"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(here)
library(janitor)


install.packages("patchwork")
install.packages("ggrepel")
install.packages("gghighlight")
install.packages("palettrrt")
install.packages("ggExtra")
install.packages("ggbeesworm")

library(patchwork)
library(ggrepel)
library(ggExtra)
library(gghighlight)
library(ggbeesworm)
```


```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

```{r}
# plotting needs 3 things: ggplot, data (with x and y) and how to plot
ggplot(data = lizards, aes(x = total_length, y = weight)) + geom_point()  

## other ways to plot the same thing

ggplot(data = lizards) +
  geom_point(aes(x = total_length, y = weight))

ggplot() +
  geom_point(data = lizards, aes(x = total_length, y = weight))

### can also layer
ggplot(data = lizards, aes(x = total_length, y = weight)) + geom_point() + geom_line()

```

```{r}
# not every geometry type needs mult aes
## Histograms only require one variable

ggplot(data = lizards, aes(x = total_length)) +
  geom_histogram()

## jitter plots have 1 cont 1 categ variable
ggplot(data = lizards, aes(y = common_name, x = weight)) + geom_jitter()
```

```{r}
# updating based on constant - no aes

ggplot(data = lizards, aes(x=weight)) + geom_histogram(color = "green", 
                                                       fill = "blue", 
                                                       linewidth = 2,
                                                       linetype = "dotted")
```

```{r}
# another ex

## to apply to all data? put in geom. TO apply to variable / based on a variable - put in aes

ggplot(data = lizards, aes(x = total_length, y = weight)) + geom_point(color = "#79B4A9",
                                                                       fill = "#9cc69B",
                                                                       shape = 20,
                                                                       size = 3,
                                                                       alpha = 0.8)
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + geom_point(aes(color = common_name, 
                                                                           size = total_length),
                                                                       alpha = 0.5) +
  # change color palette
  # + scale_color_discrete(type = c(#AA465,...for total amount of groups))
  scale_color_brewer(palette = "Set3")
```

```{r}
# themes 

ggplot(data = lizards, aes(x = site, y = weight)) +
  geom_jitter(aes(color = common_name)) +
  theme_light()
```

```{r}
# axis names

ggplot(data =  lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  labs(x = "Total length (mm)", 
       y = "Total weight (g)", 
       title = "Lizard Size")
```

```{r}
# facetting

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() + facet_wrap(~common_name, ncol = 3, scales = "free") + labs(x = "Total length (mm)",
                                                                            y = "Weight (g)")
```

```{r}
# multiple facets

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  
  geom_point() +
  facet_grid(sex ~ tail)
```

```{r}
# re ordering
lizard_counts <- lizards %>%
  count(common_name)

ggplot(data = lizard_counts, aes(y = fct_reorder(common_name, n), x = n)) +
  geom_col()
```

```{r}
# mega example
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name),
             size = 2) + 
  theme_minimal() +
  labs(x = "total length (mm)",
       y = "weight (g)",
       color = "lizard species") +
  facet_wrap(~common_name, scales = "free")

```

```{r}
# another mega example

ggplot(data = lizards, aes(y = fct_infreq(common_name))) +
  geom_bar(aes(fill = site)) +
  theme_minimal() +
  labs(x = "lizard counts",
       y = "species (common name)") +
  facet_grid(sex ~ tail)
# theme(panel label?)

```

# Interactive Session B

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point() +
  scale_x_continuous(breaks = c(0, 250, 500),
                     limits = c(0, 500)) +
                       scale_y_continuous(breaks = seq(from =0, to = 70, by = 10), limits = c(0,70)) +
  theme_light()
```

```{r}
lizard_counts <- lizards %>%
  mutate(date = lubridate::mdy(date)) %>%
  count(date)

ggplot(data = lizard_counts, aes(x = date, y = n)) + geom_line() +
  scale_x_date(breaks = scales::breaks_pretty())
  #scale_x_date(breaks = scales::breaks_width("3 years"),
               #labels = scales::label_date("'%Y") +
  labs(x = "date", y = "number of lizards (n)")
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(colour = total_length)) +
  #scale_color_gradient(low = "azure", high = "purple")
 # scale_color_gradientn(colors = c("azure", "purple", "black", "pink"))
  #scale_color_steps(low = "pink", high = "purple")
  
  ### change color = total_length
  scale_color_steps2(low = "green",
                     mid = "black",
                     high = "red",
                     midpoint = 150,
                     breaks = c(50, 75, 150, 180, 220, 280))
```

```{r}
p <- ggplot(data = lizards, aes(x = total_length, y = weight)) + geom_point()

p +
  #theme(panel.grid = element_blank())
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_line(color = "pink"),
        plot.background = element_rect(fill ="green"),
        text = element_text(size = 14, family = "serif"),
        axis.text.x = element_text(color = "blue"),
        axis.text.y = element_text(color = "purple"),
        panel.background = element_rect(color = "purple",
                                        fill = "yellow"))

```

```{r}
p +
  geom_hline(yintercept = mean(lizards$weight), color = "blue", linetype = "dashed") +
  geom_vline(xintercept = 100, color = "red") +
  annotate("text", x = 100, y = 50, label = "COOL", color = "purple") +
  annotate("text", x = 350, y = mean(lizards$weight) + 2, label = "mean weight")
```


```{r}
mono <- read_csv(here("data_tidy", "mono.csv"))

ggplot(data = mono, aes(x = year, y = lake_level)) +
  geom_rect(aes(xmin = 1941, 
                xmax = 1983,
                ymin = 6350,
                ymax = 6440),
            fill = "gray90", alpha = 0.5) +
  geom_line() +
  labs(x = "Year",
       y = "Lake Surface Level\n(feet above sea level)",
       title = "Mono Lake (1850-2017)",
       caption = "Data: Mono Basin Clearinghouse") +
  scale_y_continuous(limits = c(6350, 6440),
                       breaks = c(6370, 6400, 6430),
                     labels = scales::label_comma()) +
  scale_x_continuous(limits = c(1850, 2020),
                     breaks = seq(1850, 2010, by = 20),
                     expand = c(0,0)) +
  geom_hline(yintercept = 6360, linetype = "dashed") +
  annotate("text", x = 1910, y = 6370, label = "Decreased shrimp abundance expected\n 6,360 feet about sea level") +
  annotate("text", x = 1962,
           y = 6425,
           label = "Unrestricted Diversions\n (1941-1983)", size = 3) + 
  theme_minimal()
```

